/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CA2_DIT2B22_JovanYapKeatAn_LauChunYi;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;

/**
 *
 * @author Jovan
 */
public class StudentLibrary extends javax.swing.JFrame {
    
    // Management objects for books and students, handling data logic
    private static BookManagement bookManagement = new BookManagement();
    private static StudentManagement studentManagement = new StudentManagement();
    
    // Track current index in student and book carousels
    private static int studentCarousellIndex = 0;
    private static int bookCarousellIndex = 0;
    
    // Flags to control UI behavior for search
    private boolean searchBtnTriggered = false; // Tracks if search button was pressed
    private boolean showMoreSearchResultDetails = false; // Controls if detailed info shown in search results

    /**
     * Creates new form StudentLibrary
     */
    public StudentLibrary() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        studentAndBookOptions = new javax.swing.ButtonGroup();
        searchForm = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        studentOption = new javax.swing.JRadioButton();
        bookOption = new javax.swing.JRadioButton();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        searchResultLabel = new javax.swing.JLabel();
        borrowBookBtn = new javax.swing.JButton();
        displayStudentInfoBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        studentCarousell = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        studentIdLabel = new javax.swing.JLabel();
        studentNameTextField = new javax.swing.JTextField();
        studentIdTextField = new javax.swing.JTextField();
        previousStudentBtn = new javax.swing.JButton();
        nextStudentBtn = new javax.swing.JButton();
        firstStudentBtn = new javax.swing.JButton();
        lastStudentBtn = new javax.swing.JButton();
        bookCarousell = new javax.swing.JPanel();
        bookTitleLabel = new javax.swing.JLabel();
        bookAuthorLabel = new javax.swing.JLabel();
        bookIsbnLabel = new javax.swing.JLabel();
        bookAvailableLabel = new javax.swing.JLabel();
        bookTitleTextField = new javax.swing.JTextField();
        bookAuthorTextField = new javax.swing.JTextField();
        bookIsbnTextField = new javax.swing.JTextField();
        bookAvailableTextField = new javax.swing.JTextField();
        previousBookBtn = new javax.swing.JButton();
        nextBookBtn = new javax.swing.JButton();
        firstBookBtn = new javax.swing.JButton();
        lastBookBtn = new javax.swing.JButton();
        returnBookBtn = new javax.swing.JToggleButton();
        searchResultScrollPane = new javax.swing.JScrollPane();
        searchResultPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchForm.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        searchLabel.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        searchLabel.setText("Search:");

        studentAndBookOptions.add(studentOption);
        studentOption.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        studentOption.setText("by Student");
        studentOption.setSelected(true);
        studentOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentOptionActionPerformed(evt);
            }
        });

        studentAndBookOptions.add(bookOption);
        bookOption.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        bookOption.setText("by Book");
        bookOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookOptionActionPerformed(evt);
            }
        });

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchFormLayout = new javax.swing.GroupLayout(searchForm);
        searchForm.setLayout(searchFormLayout);
        searchFormLayout.setHorizontalGroup(
            searchFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTextField)
                    .addGroup(searchFormLayout.createSequentialGroup()
                        .addGroup(searchFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchFormLayout.createSequentialGroup()
                                .addComponent(studentOption)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bookOption))
                            .addComponent(searchLabel)
                            .addComponent(searchButton))
                        .addGap(0, 42, Short.MAX_VALUE)))
                .addContainerGap())
        );
        searchFormLayout.setVerticalGroup(
            searchFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchFormLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentOption)
                    .addComponent(bookOption))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        searchResultLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchResultLabel.setText("Search Result");

        borrowBookBtn.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        borrowBookBtn.setText("Borrow Book");
        borrowBookBtn.setVisible(false);
        borrowBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowBookBtnActionPerformed(evt);
            }
        });

        displayStudentInfoBtn.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        displayStudentInfoBtn.setText("Display Student Information");
        displayStudentInfoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayStudentInfoBtnActionPerformed(evt);
            }
        });

        exitBtn.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        studentCarousell.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Student 1 of 3", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        studentCarousell.setForeground(new java.awt.Color(255, 255, 255));
        if (!studentManagement.getStudents().isEmpty()) {
            Student initialStudent = studentManagement.getStudents().get(0);
            studentNameTextField.setText(initialStudent.getName());
            studentIdTextField.setText(initialStudent.getAdminNumber());
            studentCarousell.putClientProperty("student", initialStudent);
        }
        this.updateStudentBorderTitle();

        nameLabel.setText("Name:");

        studentIdLabel.setText("Student ID:");

        studentNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentNameTextFieldActionPerformed(evt);
            }
        });

        previousStudentBtn.setText("Previous");
        previousStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousStudentBtnActionPerformed(evt);
            }
        });

        nextStudentBtn.setText("Next");
        nextStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextStudentBtnActionPerformed(evt);
            }
        });

        firstStudentBtn.setText("First");
        firstStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstStudentBtnActionPerformed(evt);
            }
        });

        lastStudentBtn.setText("Last");
        lastStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastStudentBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout studentCarousellLayout = new javax.swing.GroupLayout(studentCarousell);
        studentCarousell.setLayout(studentCarousellLayout);
        studentCarousellLayout.setHorizontalGroup(
            studentCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentCarousellLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentCarousellLayout.createSequentialGroup()
                        .addGroup(studentCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studentIdLabel)
                            .addComponent(nameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(studentIdTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(studentNameTextField)))
                    .addGroup(studentCarousellLayout.createSequentialGroup()
                        .addComponent(previousStudentBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextStudentBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(firstStudentBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastStudentBtn)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        studentCarousellLayout.setVerticalGroup(
            studentCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentCarousellLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(studentNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentIdLabel)
                    .addComponent(studentIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousStudentBtn)
                    .addComponent(nextStudentBtn)
                    .addComponent(firstStudentBtn)
                    .addComponent(lastStudentBtn))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        bookCarousell.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "1 of 1", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        Student initialStudent = studentManagement.getStudents().get(0);

        if (!initialStudent.getBooks().isEmpty()) {
            Book initialBook = initialStudent.getBooks().get(bookCarousellIndex);

            bookTitleTextField.setText(initialBook.getTitle());
            bookAuthorTextField.setText(initialBook.getAuthor());
            bookIsbnTextField.setText(Integer.toString(initialBook.getISBN()));
            bookAvailableTextField.setText(Boolean.toString(initialBook.getAvailability()));

            bookCarousell.putClientProperty("book", initialBook);
        }
        this.updateBookBorderTitle();

        bookTitleLabel.setText("Title:");

        bookAuthorLabel.setText("Author:");

        bookIsbnLabel.setText("ISBN:");

        bookAvailableLabel.setText("Available:");

        bookTitleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookTitleTextFieldActionPerformed(evt);
            }
        });

        bookIsbnTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIsbnTextFieldActionPerformed(evt);
            }
        });

        previousBookBtn.setText("Previous");
        previousBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBookBtnActionPerformed(evt);
            }
        });

        nextBookBtn.setText("Next");
        nextBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBookBtnActionPerformed(evt);
            }
        });

        firstBookBtn.setText("First");
        firstBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstBookBtnActionPerformed(evt);
            }
        });

        lastBookBtn.setText("Last");
        lastBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastBookBtnActionPerformed(evt);
            }
        });

        returnBookBtn.setText("Return Book");
        returnBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBookBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bookCarousellLayout = new javax.swing.GroupLayout(bookCarousell);
        bookCarousell.setLayout(bookCarousellLayout);
        bookCarousellLayout.setHorizontalGroup(
            bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookCarousellLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(bookCarousellLayout.createSequentialGroup()
                        .addComponent(previousBookBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextBookBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(firstBookBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastBookBtn))
                    .addGroup(bookCarousellLayout.createSequentialGroup()
                        .addGroup(bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(bookCarousellLayout.createSequentialGroup()
                                .addComponent(bookIsbnLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bookIsbnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(bookCarousellLayout.createSequentialGroup()
                                .addComponent(bookAuthorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bookAuthorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(bookCarousellLayout.createSequentialGroup()
                                .addComponent(bookTitleLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bookTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(bookCarousellLayout.createSequentialGroup()
                                .addComponent(bookAvailableLabel)
                                .addGap(18, 18, 18)
                                .addComponent(bookAvailableTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(returnBookBtn)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        bookCarousellLayout.setVerticalGroup(
            bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookCarousellLayout.createSequentialGroup()
                .addGroup(bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookCarousellLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookTitleLabel)
                            .addComponent(bookTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookAuthorLabel)
                            .addComponent(bookAuthorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bookCarousellLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(returnBookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookIsbnLabel)
                    .addComponent(bookIsbnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookAvailableLabel)
                    .addComponent(bookAvailableTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(bookCarousellLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousBookBtn)
                    .addComponent(nextBookBtn)
                    .addComponent(firstBookBtn)
                    .addComponent(lastBookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout searchResultPanelLayout = new javax.swing.GroupLayout(searchResultPanel);
        searchResultPanel.setLayout(searchResultPanelLayout);
        searchResultPanelLayout.setHorizontalGroup(
            searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        searchResultPanelLayout.setVerticalGroup(
            searchResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 66, Short.MAX_VALUE)
        );

        searchResultScrollPane.setViewportView(searchResultPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentCarousell, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookCarousell, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(borrowBookBtn)
                    .addComponent(exitBtn)
                    .addComponent(searchResultLabel)
                    .addComponent(searchForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayStudentInfoBtn)
                    .addComponent(searchResultScrollPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(studentCarousell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bookCarousell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchResultLabel)
                        .addGap(4, 4, 4)
                        .addComponent(searchResultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(displayStudentInfoBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(borrowBookBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitBtn)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Handle student option selection - adjust button visibility
    private void studentOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentOptionActionPerformed
        // TODO add your handling code here:
        displayStudentInfoBtn.setVisible(true);
        borrowBookBtn.setVisible(false);
        this.searchBtnTriggered = false;
    }//GEN-LAST:event_studentOptionActionPerformed

    // Handle book option selection - adjust button visibility
    private void bookOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookOptionActionPerformed
        // TODO add your handling code here:
        borrowBookBtn.setVisible(true);
        displayStudentInfoBtn.setVisible(false);
        this.searchBtnTriggered = false;
    }//GEN-LAST:event_bookOptionActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    /**
     * Main search button handler.
     * Performs search based on current radio selection (student or book),
     * updates the searchResultPanel with matching results,
     * plays sounds for success or failure.
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        this.searchBtnTriggered = true; // Mark that a search was triggered
        searchResultPanel.removeAll(); // Clear previous results
        searchResultPanel.setLayout(new BoxLayout(searchResultPanel, BoxLayout.Y_AXIS));
        
        if (studentOption.isSelected()) {
            // Search students by name
            ArrayList<Student> searchedStudents = studentManagement.searchStudentsByName(searchTextField.getText());
            
            if (searchedStudents.size() > 0) {
                AudioPlayer.playSound(System.getProperty("user.dir")+"\\sounds\\success.wav");
                
                // For each student found, create a JLabel showing their info
                for (Student s : searchedStudents) {
                    String lbl = "<html>";
                    lbl += s.getName() + ", P" + s.getAdminNumber();
                    
                    // Optionally show borrowed books details if flag is set
                    if (this.showMoreSearchResultDetails) {
                        for (Book b : s.getBooks()) 
                            lbl += "<br />&nbsp;&nbsp;&nbsp;" + b.getTitle();
                    }
                    lbl += "</html>";
                    JLabel studentLabel = new JLabel(lbl);
                    studentLabel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5)); // padding
                    searchResultPanel.add(studentLabel);
                }
            } else // Student not found
                AudioPlayer.playSound(System.getProperty("user.dir")+"\\sounds\\huh.wav");
            
        } else if (bookOption.isSelected()) {
            // Search books by title
            ArrayList<Book> searchedBooks = bookManagement.searchBooksByTitle(searchTextField.getText());
            
            if (searchedBooks.size() > 0) {
                AudioPlayer.playSound(System.getProperty("user.dir")+"\\sounds\\success.wav");
                
                ButtonGroup bookGroup = new ButtonGroup(); // To group radio buttons for book selection
                
                // Create a radio button for each matching book showing title, ISBN, and availability
                for (Book b : searchedBooks) {
                    String availabilityText = b.getAvailability()
                        ? "<font color='green'>Available</font>"
                        : "<font color='red'>Unavailable</font>";
                    JRadioButton bookOption = new JRadioButton(
                        "<html>" + b.getTitle() + " (" + b.getISBN() + ") " + availabilityText + "</html>"
                   );
                    bookOption.putClientProperty("book", b); // Store the Book object in the respective radio options
    
                    bookGroup.add(bookOption);
                    searchResultPanel.add(bookOption);
                }
            } else { // book not found
                AudioPlayer.playSound(System.getProperty("user.dir")+"\\sounds\\huh.wav");
            }
        }
        
        // Refresh UI components after adding results
        searchResultPanel.revalidate();
        searchResultPanel.repaint();
        
        // Fix the preferred size of result panel and scrollbar policies
        searchResultPanel.setPreferredSize(new Dimension(searchResultPanel.getWidth(), 100));
        searchResultScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        searchResultScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Toggles detailed view of student search results (show borrowed books or not)
     * When clicked, toggles the flag and re-triggers the search to update results.
     */
    private void displayStudentInfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayStudentInfoBtnActionPerformed
        // TODO add your handling code here:
        if (this.searchBtnTriggered) {
            this.showMoreSearchResultDetails = !this.showMoreSearchResultDetails;
            searchButton.doClick();
        }
    }//GEN-LAST:event_displayStudentInfoBtnActionPerformed

    /**
     * Updates the student's record in the database (file) by adding a borrowed book.
     * Reads the students.txt file, updates the borrowed book count and appends new book details.
     */
    private void borrowBookForStudentInDb(Book book, Student student) {
        try {
            List<String> lines = Files.readAllLines(
                Paths.get(
                    System.getProperty("user.dir") + 
                    "\\src\\CA2_DIT2B22_JovanYapKeatAn_LauChunYi\\students.txt"
                )
            );
            ArrayList<String> updatedLines = new ArrayList<>();
            
            for (int i=0; i<lines.size(); i++) {
                String line = lines.get(i);
                updatedLines.add(line);
                
                // Find the student's entry by matching name and admin number
                if (line.equals(student.getName() + ";" + student.getAdminNumber() + ";")) {
                    // Increment the number of borrowed books (next line)
                    updatedLines.add(Integer.toString(Integer.parseInt(lines.get(++i).split(";")[0]) + 1) + ";");
                    // Append the new borrowed book info
                    updatedLines.add(book.getTitle() + ";" + book.getAuthor() + ";" + book.getISBN() + ";" + book.getPrice() + ";" + book.getCategory() + ";");   
                }
            }
            
            // Write back the updated content to the file
            Files.write(
                Paths.get(
                    System.getProperty("user.dir") + 
                    "\\src\\CA2_DIT2B22_JovanYapKeatAn_LauChunYi\\students.txt"
                ), 
                updatedLines
            );
            
        } catch (IOException e) {
            System.out.println(e);
        }
    }
    
    /**
     * Removes a returned book from the student's record in the database (file).
     * Decreases the borrowed book count and removes the specific book's details.
     */
    private void returnBookForStudentInDb(Book book, Student student) {
        try {
            List<String> lines = Files.readAllLines(
                Paths.get(
                    System.getProperty("user.dir") + 
                    "\\src\\CA2_DIT2B22_JovanYapKeatAn_LauChunYi\\students.txt"
                )
            );
            ArrayList<String> updatedLines = new ArrayList<>();
            
            for (int i=0; i<lines.size(); i++) {
                String line = lines.get(i);
                updatedLines.add(line);
                
                // Find the student record
                if (line.equals(student.getName() + ";" + student.getAdminNumber() + ";")) {
                    int noOfBooksBorrowed = Integer.parseInt(lines.get(++i).split(";")[0]);
                    // Decrement the borrowed book count
                    updatedLines.add(Integer.toString(noOfBooksBorrowed - 1) + ";");
                    
                    int currentStudentLineIndex = i;
                    // Iterate through borrowed books lines and skip the one to be returned
                    for (int j=currentStudentLineIndex; j<(currentStudentLineIndex+noOfBooksBorrowed); j++) {
                        line = lines.get(++i);
                        if (!line.equals(book.getTitle() + ";" + book.getAuthor() + ";" + book.getISBN() + ";" + book.getPrice() + ";" + book.getCategory() + ";")) 
                            updatedLines.add(line);
                        
                    }
                }
            }
            
            // Write updated lines back to the file
            Files.write(
                Paths.get(
                    System.getProperty("user.dir") + 
                    "\\src\\CA2_DIT2B22_JovanYapKeatAn_LauChunYi\\students.txt"
                ), 
                updatedLines
            );
            
        } catch (IOException e) {
            System.out.println(e);
        }
    }
    
    /**
     * Updates the availability status of a book in the books.txt file.
     * Reads all books, updates the matched book's availability, then writes back.
     */
    private void updateBookAvailabilityInDb(boolean status, Book book) {
        try {
            List<String> lines = Files.readAllLines(
                Paths.get(
                    System.getProperty("user.dir") + 
                    "\\src\\CA2_DIT2B22_JovanYapKeatAn_LauChunYi\\books.txt"
                )
            );
            ArrayList<String> updatedLines = new ArrayList<>();
            updatedLines.add(lines.get(0)); // Add header line (Total number of library books)
            
            for (int i=1; i<lines.size(); i++) { // skip first line of books.txt
                String line = lines.get(i);
                if (line.split(";")[2].equals(Integer.toString(book.getISBN()))) 
                    line = book.getTitle() + ";" + book.getAuthor() + ";" + book.getISBN() + ";" + book.getPrice() + ";" + book.getCategory() + ";" + status + ";";
                updatedLines.add(line);
            }
            
            // Write updated book list back to file
            Files.write(
                Paths.get(
                    System.getProperty("user.dir") + 
                    "\\src\\CA2_DIT2B22_JovanYapKeatAn_LauChunYi\\books.txt"
                ), 
                updatedLines
            );
        } catch (IOException e) {
            System.out.println(e);
        }
    }
    
    /**
     * Handler for borrow book button.
     * Checks which book is selected in the search results, verifies availability,
     * updates student and book data accordingly, refreshes UI.
     */
    private void borrowBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowBookBtnActionPerformed
        // TODO add your handling code here:
        for (Component c : searchResultPanel.getComponents()) {
            if (c instanceof JRadioButton) {
                JRadioButton btn = (JRadioButton) c;
                if (btn.isSelected()) {
                    Book selectedBook = (Book) btn.getClientProperty("book");
                    
                    if (selectedBook.getAvailability()) {
                        Student currentStudent = (Student) studentCarousell.getClientProperty("student");
                        currentStudent.borrowBook(selectedBook);
                        this.borrowBookForStudentInDb(selectedBook, currentStudent);
                        this.updateBookAvailabilityInDb(false, selectedBook);
                        
                        searchButton.doClick(); // Refresh search results to update display of availability status for the book
    
                        // Reset book carousel and update fields after borrowing
                        bookCarousellIndex = 0;
                        this.updateBookFields();
                        this.updateBookBorderTitle();
                        
                        break;
                        
                    } else 
                        JOptionPane.showMessageDialog(this, "Book is currently unavailable!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_borrowBookBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exitBtnActionPerformed

    private void studentNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentNameTextFieldActionPerformed

    /**
     * Updates the student display fields with current student's info from the carousel index.
     * Sets the student name and ID text fields accordingly.
     */
    private void updateStudentFields() {
        if (studentManagement.getStudents().isEmpty()) {
            // Clear fields if no students loaded
            studentNameTextField.setText("");
            studentIdTextField.setText("");
            return;
        }
        Student currentStudent = studentManagement.getStudents().get(studentCarousellIndex);
        studentNameTextField.setText(currentStudent.getName());
        studentIdTextField.setText(currentStudent.getAdminNumber());
        studentCarousell.putClientProperty("student", currentStudent); // Store current student for reference
    }
    
    /**
     * Updates the border title of the student carousel panel
     * Shows the current index out of total students.
     */
    private void updateStudentBorderTitle() {
        studentCarousell.setBorder(
            BorderFactory.createTitledBorder(
                "Student " + (studentCarousellIndex + 1) + 
                " of " + studentManagement.getStudents().size()
            )
        );
    }
    
    /**
     * Updates the border title of the book carousel panel
     * Shows the current book index out of total books borrowed by current student.
     */
    private void updateBookBorderTitle() {
        bookCarousell.setBorder(
            BorderFactory.createTitledBorder(
                "Book " + (bookCarousellIndex + 1) + 
                " of " + studentManagement.getStudents().get(studentCarousellIndex).getBooks().size()
            )
        );
    }
    
    /**
     * Updates the book detail fields to show the selected book's info.
     * If no books are borrowed, clears fields and hides return button.
     */
    private void updateBookFields() {
        Student currentStudent = studentManagement.getStudents().get(studentCarousellIndex);
        
        if (currentStudent.getBooks().isEmpty()) { // If currentStudent has no borrowed books
            bookTitleTextField.setText("");
            bookAuthorTextField.setText("");
            bookIsbnTextField.setText("");
            bookAvailableTextField.setText("");
            returnBookBtn.setVisible(false);
            return; // return before any IndexOutOfBoundsException gets thrown below
        }
        returnBookBtn.setVisible(true);
        Book currentBook = currentStudent.getBooks().get(bookCarousellIndex);
        
        bookTitleTextField.setText(currentBook.getTitle());
        bookAuthorTextField.setText(currentBook.getAuthor());
        bookIsbnTextField.setText(Integer.toString(currentBook.getISBN()));
        bookAvailableTextField.setText(Boolean.toString(currentBook.getAvailability()));
        bookCarousell.putClientProperty("book", currentBook); // Store current book for reference
    }
    
    /**
     * Moves the student carousel to the next student.
     * Loops back to first student if at end.
     * Also resets the book carousel and updates display.
     */
    private void nextStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextStudentBtnActionPerformed
        // TODO add your handling code here:
        if (studentCarousellIndex == studentManagement.getStudents().size() - 1) 
            studentCarousellIndex = -1;
        studentCarousellIndex++;
        this.updateStudentFields();
        this.updateStudentBorderTitle();
        
        bookCarousellIndex = 0;
        this.updateBookFields();
        this.updateBookBorderTitle();
    }//GEN-LAST:event_nextStudentBtnActionPerformed

    /**
     * Moves to the first student in the carousel.
     * Resets book carousel as well and updates UI.
     */
    private void firstStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstStudentBtnActionPerformed
        // TODO add your handling code here:
        studentCarousellIndex = 0;
        this.updateStudentFields();
        this.updateStudentBorderTitle();
        
        bookCarousellIndex = 0;
        this.updateBookFields();
        this.updateBookBorderTitle();
    }//GEN-LAST:event_firstStudentBtnActionPerformed

    /**
     * Moves to the last student in the list.
     * Also resets book carousel and updates fields.
     */
    private void lastStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastStudentBtnActionPerformed
        // TODO add your handling code here:
        studentCarousellIndex = studentManagement.getStudents().size() - 1;
        this.updateStudentFields();
        this.updateStudentBorderTitle();
        
        bookCarousellIndex = 0;
        this.updateBookFields();
        this.updateBookBorderTitle();
    }//GEN-LAST:event_lastStudentBtnActionPerformed

    /**
     * Moves to the previous student in the list.
     * If at first student, loops around to the end.
     * Also resets and updates the book carousel.
     */
    private void previousStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousStudentBtnActionPerformed
        // TODO add your handling code here:
        if (studentCarousellIndex == 0) studentCarousellIndex = studentManagement.getStudents().size();
        studentCarousellIndex--;
        this.updateStudentFields();
        this.updateStudentBorderTitle();
        
        bookCarousellIndex = 0;
        this.updateBookFields();
        this.updateBookBorderTitle();
    }//GEN-LAST:event_previousStudentBtnActionPerformed

    private void bookIsbnTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookIsbnTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookIsbnTextFieldActionPerformed

    private void bookTitleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookTitleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookTitleTextFieldActionPerformed

    /**
     * Handles return book button click.
     * Removes book from student’s local and file records,
     * updates book availability in database,
     * and refreshes UI.
     */
    private void returnBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBookBtnActionPerformed
        // TODO add your handling code here:
        Book returnBook = (Book) bookCarousell.getClientProperty("book");
        Student currentStudent = (Student) studentCarousell.getClientProperty("student");
        currentStudent.removeBook(returnBook.getISBN());
        this.returnBookForStudentInDb(returnBook, currentStudent);
        this.updateBookAvailabilityInDb(true, returnBook);
        
        searchButton.doClick(); // Reload display of search results for student/book details

        // Reset and update book carousell
        bookCarousellIndex = 0;
        this.updateBookFields();
        this.updateBookBorderTitle();
    }//GEN-LAST:event_returnBookBtnActionPerformed

    /**
     * Moves to the next book borrowed by the current student.
     * Loops back to start if at the last book.
     */
    private void nextBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBookBtnActionPerformed
        Student currentStudent = studentManagement.getStudents().get(studentCarousellIndex);
        if (bookCarousellIndex == currentStudent.getBooks().size() - 1 || currentStudent.getBooks().size() == 0) 
            bookCarousellIndex = -1;
        bookCarousellIndex++;
        this.updateBookFields();
        this.updateBookBorderTitle();
    }//GEN-LAST:event_nextBookBtnActionPerformed

    /**
     * Moves to the previous book borrowed by the current student.
     * Loops back to the end if currently at the first book.
     */
    private void previousBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBookBtnActionPerformed
        Student currentStudent = studentManagement.getStudents().get(studentCarousellIndex);
        if (bookCarousellIndex == 0 || currentStudent.getBooks().size() == 0) 
            bookCarousellIndex = currentStudent.getBooks().size();
        bookCarousellIndex--;
        this.updateBookFields();
        this.updateBookBorderTitle();
    }//GEN-LAST:event_previousBookBtnActionPerformed

    /**
     * Moves to the first book in the current student's borrowed books.
     * Updates book display fields accordingly.
     */
    private void firstBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstBookBtnActionPerformed
        bookCarousellIndex = 0;
        this.updateBookFields();
        this.updateBookBorderTitle();
    }//GEN-LAST:event_firstBookBtnActionPerformed

    /**
     * Moves to the last book borrowed by the current student.
     * Updates the display fields to reflect selected book.
     */
    private void lastBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastBookBtnActionPerformed
        Student currentStudent = studentManagement.getStudents().get(studentCarousellIndex);
        bookCarousellIndex = currentStudent.getBooks().size() - 1;
        this.updateBookFields();
        this.updateBookBorderTitle();
    }//GEN-LAST:event_lastBookBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentLibrary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentLibrary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentLibrary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentLibrary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StudentLibrary studentLibrary = new StudentLibrary();
                studentLibrary.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bookAuthorLabel;
    private javax.swing.JTextField bookAuthorTextField;
    private javax.swing.JLabel bookAvailableLabel;
    private javax.swing.JTextField bookAvailableTextField;
    private javax.swing.JPanel bookCarousell;
    private javax.swing.JLabel bookIsbnLabel;
    private javax.swing.JTextField bookIsbnTextField;
    private javax.swing.JRadioButton bookOption;
    private javax.swing.JLabel bookTitleLabel;
    private javax.swing.JTextField bookTitleTextField;
    private javax.swing.JButton borrowBookBtn;
    private javax.swing.JButton displayStudentInfoBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton firstBookBtn;
    private javax.swing.JButton firstStudentBtn;
    private javax.swing.JButton lastBookBtn;
    private javax.swing.JButton lastStudentBtn;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nextBookBtn;
    private javax.swing.JButton nextStudentBtn;
    private javax.swing.JButton previousBookBtn;
    private javax.swing.JButton previousStudentBtn;
    private javax.swing.JToggleButton returnBookBtn;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchForm;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JLabel searchResultLabel;
    private javax.swing.JPanel searchResultPanel;
    private javax.swing.JScrollPane searchResultScrollPane;
    private javax.swing.JTextField searchTextField;
    private javax.swing.ButtonGroup studentAndBookOptions;
    private javax.swing.JPanel studentCarousell;
    private javax.swing.JLabel studentIdLabel;
    private javax.swing.JTextField studentIdTextField;
    private javax.swing.JTextField studentNameTextField;
    private javax.swing.JRadioButton studentOption;
    // End of variables declaration//GEN-END:variables
}
